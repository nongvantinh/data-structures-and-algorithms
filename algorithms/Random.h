#ifndef DSAA_RANDOM_H
#define DSAA_RANDOM_H

#include <random>
#include <limits>
#include "arrays/DynamicArray.h"

namespace dsaa
{
    namespace random
    {
        // Produces random integer values i, uniformly distributed on the closed interval [a, b].
        // IntType The result type generated by the generator. The effect is undefined if this is not one of
        // short, int, long, long long, unsigned short, unsigned int, unsigned long, or unsigned long long.
        template <typename IntType>
        IntType random_range_int(IntType p_first = std::numeric_limits<IntType>::min(), IntType p_last = std::numeric_limits<IntType>::max());
        template <typename IntType>
        dsaa::DynamicArray<IntType> random_range_ints(size_t p_size, IntType p_first = std::numeric_limits<IntType>::min(), IntType p_last = std::numeric_limits<IntType>::max());

        // Produces random floating-point values i, uniformly distributed on the interval [a, b).
        // RealType The result type generated by the generator.
        // The effect is undefined if this is not one of float, double, or long double.
        template <typename RealType>
        RealType random_range_real(RealType p_begin = std::numeric_limits<RealType>::min(), RealType p_end = std::numeric_limits<RealType>::max());
        template <typename RealType>
        dsaa::DynamicArray<RealType> random_range_reals(size_t p_size, RealType p_begin = std::numeric_limits<RealType>::min(), RealType p_end = std::numeric_limits<RealType>::max());

        bool random_bool(double p_probability_of_true = 0.5);
    }
}

template <typename IntType>
IntType dsaa::random::random_range_int(IntType p_first, IntType p_last)
{
    std::random_device device;
    std::mt19937 engine(device());
    std::uniform_int_distribution<IntType> distribution(p_first, p_last); // distribution in range [p_first, p_last]
    return distribution(engine);
}

template <typename RealType>
RealType dsaa::random::random_range_real(RealType p_begin, RealType p_end)
{
    std::random_device device;
    std::mt19937 engine(device());
    std::uniform_real_distribution<RealType> distribution(p_begin, p_end); // distribution in range [p_begin, p_end)
    return distribution(engine);
}

template <typename IntType>
dsaa::DynamicArray<IntType> dsaa::random::random_range_ints(size_t p_size, IntType p_first, IntType p_last)
{
    std::random_device device;
    std::mt19937 engine(device());
    std::uniform_int_distribution<IntType> distribution(p_first, p_last); // distribution in range [p_first, p_last]
    dsaa::DynamicArray<IntType> result(p_size);

    for (size_t i(0); p_size != i; ++i)
        result[i] = distribution(engine);
    return result;
}

template <typename RealType>
dsaa::DynamicArray<RealType> dsaa::random::random_range_reals(size_t p_size, RealType p_begin, RealType p_end)
{
    std::random_device device;
    std::mt19937 engine(device());
    std::uniform_real_distribution<RealType> distribution(p_begin, p_end); // distribution in range [p_begin, p_end)
    dsaa::DynamicArray<RealType> result(p_size);

    for (size_t i(0); p_size != i; ++i)
        result[i] = distribution(engine);
    return result;
}

bool dsaa::random::random_bool(double p_probability_of_true)
{
    std::random_device device;
    std::mt19937 engine(device());
    std::bernoulli_distribution distribution(p_probability_of_true);
    return distribution(engine);
}

#endif //!DSAA_RANDOM_H